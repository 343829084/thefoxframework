#include <base/Types.h>

// 十六进制的字符和数字对应表
const char hexNum[128] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F 
	};

const char hexStr[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','\0'};

/// @brief 16进制的字符串解码成正常显示的字符串
inline String HexStringDecode(const String &hexStr)
{
	String buf;
	int index = 0;
	while ('\0'!= hexStr[index]) {
		buf +=  static_cast<char>(hexNum[hexStr[index]] * 16 + hexNum[hexStr[index+1]]);
		index += 2;
	}
	return buf;
}

/// @brief 字符串编码成16进制显示的字符串
inline String encodeToHexString(const String &str)
{
	String buf;
	int index = 0;
	while ('\0'!= str[index]) {
		buf += hexStr[static_cast<unsigned char>(str[index]) / 16];
		buf += hexStr[static_cast<unsigned char>(str[index]) % 16];
		++index;
	}
	return buf;
}